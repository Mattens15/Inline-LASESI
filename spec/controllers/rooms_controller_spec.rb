require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe RoomsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Room. As you add validations to Room, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @valid_attributes = FactoryBot.attributes_for(:valid_room)
    @invalid_attributes = FactoryBot.attributes_for(:invalid_room_param)
    @user = FactoryBot.create(:user)
  end
  
  describe "GET #index" do
    it "returns a success response" do
      room = @user.rooms.create! @valid_attributes
      get :index, params: {}
      expect(response).to be_successful
      #room.destroy!
    end
  end

  describe "GET #show" do
    context "with valid id" do
      it "returns a success response" do
        room = @user.rooms.create! @valid_attributes
        get :show, params: {id: room.to_param}
        expect(response).to be_successful
        #room.destroy!
      end
    end
    
    context "with invalid id" do
      it "shows error page" do
        id = Room.count + 1
        expect{get :show, params: {id: id}}.not_to raise_error
        expect(response).to render_template(:file => "#{Rails.root}/public/404.html.haml")
      end
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      allow(controller).to receive(:current_user).and_return(@user);
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      allow(controller).to receive(:current_user).and_return(@user)
      allow(controller).to receive(:logged_in?).and_return(true)
      allow(controller).to receive(:correct_user).and_return(true)
  
      room = @user.rooms.create! @valid_attributes
      get :edit, params: {id: room.to_param}
      expect(response).to be_successful
      #room.destroy!
    end
  end

  describe "POST #create" do
    context "with valid params" do
      
      
      it "creates a new Room" do
        allow(controller).to receive(:logged_in?).and_return(true)
        allow(controller).to receive(:current_user).and_return(@user)
        expect {
          post :create, params: {room: @valid_attributes}
        }.to change(Room, :count).by(1)
        
      end

      it "redirects to the created room" do
        allow(controller).to receive(:logged_in?).and_return(true)
        allow(controller).to receive(:current_user).and_return(@user)
        post :create, params: {room: @valid_attributes}
        expect(response).to redirect_to(Room.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        allow(controller).to receive(:logged_in?).and_return(true)
        allow(controller).to receive(:current_user).and_return(@user)
        post :create, params: {room: @invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {'name' => 'AOOOOO'}
      }

      it "updates the requested room" do
        allow(controller).to receive(:logged_in?).and_return(true)
        allow(controller).to receive(:current_user).and_return(@user)
        
        room = @user.rooms.create! @valid_attributes
        put :update, params: {id: room.to_param, room: new_attributes}
        room.reload
        expect(room.name).to eq new_attributes['name']
        #room.destroy!
      end

      it "redirects to the room" do
        room = @user.rooms.create! @valid_attributes
        put :update, params: {id: room.to_param, room: @valid_attributes}
        expect(response).to redirect_to(edit_room_path(room.hash_id))
        #room.destroy!
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        room = @user.rooms.create! @valid_attributes
        put :update, params: {id: room.to_param, room: @invalid_attributes}
        expect(response).to be_successful
        expect(room.name).not_to eq(@invalid_attributes => :name)
        expect(room.time_from).not_to eq(@invalid_attributes => :time_from)
        expect(room.time_to).not_to eq(@invalid_attributes => :time_to)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested room" do
      allow(controller).to receive(:logged_in?).and_return(true)
      allow(controller).to receive(:current_user).and_return(@user)
      allow(controller).to receive(:correct_user).and_return(true)
      room = @user.rooms.create! @valid_attributes
      expect {
        delete :destroy, params: {id: room.id}
      }.to change(Room, :count).by(-1)
    end

    it "redirects to the rooms list" do
      room = @user.rooms.create! @valid_attributes
      delete :destroy, params: {id: room.to_param}
      expect(response).to redirect_to(root_url)
    end
  end

end
